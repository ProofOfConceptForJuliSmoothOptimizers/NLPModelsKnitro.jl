pipeline {
  agent any
  environment {
    REPO_NAME = "NLPModelsKnitro.jl"
    OWNER = " ProofOfConceptForJuliSmoothOptimizers"
  }
  stages {
    stage ('Testing Stage') {
      steps {
        sh """
          julia -E 'using Pkg; Pkg.activate(joinpath('~', "tests", "NLPModelsKnitro")); Pkg.add("NLPModelsKnitro"); Pkg.build("NLPModelsKnitro"); Pkg.test("NLPModelsKnitro")' &> test_results.log"
        """
      }
    }
    stage ('Create Gist') {
      steps {
        sh """test_results_content="cat test_results.log" """
        sh """gist_url=curl -H 'Authorization: token $GITHUB_AUTH' -X POST -d '{"public":true,"files":{"test_results.log":{"content":"eval $test_results_content"}}}' https://api.github.com/gists | python3 -c "import sys, json; print(json.load(sys.sdin)['url']")"""
      }
    }
    stage ('Write Comment') {
      steps {
        script {
          env.PR_NUMBER = env.BRANCH_NAME.tokenize('PR-')[0]
        }
        sh """curl -H 'Authorization: token $GITHUB_AUTH' -X POST -d '{"body": "Here are the test results: $gist_url"}'"""
      }
    }
  }
  post {
    success {
      echo "SUCCESS!"  
    }
    cleanup {
      sh 'printenv'
      sh 'git reset --hard'
      sh 'git clean -fd'
    }
  }
}
