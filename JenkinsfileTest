def test_results_content = ''
def gist_url = ''
pipeline {
  agent any
  environment {
    REPO_NAME = "NLPModelsKnitro.jl"
    OWNER = " ProofOfConceptForJuliSmoothOptimizers"
  }
  stages {
    stage ('Testing Stage') {
      steps {
        sh """
          pwd
          julia -E 'using Pkg; Pkg.activate(joinpath("tests", "NLPModelsKnitro")); Pkg.add("NLPModelsKnitro"); Pkg.build("NLPModelsKnitro"); Pkg.test("NLPModelsKnitro")' &> test_results.log
          cat test_results.log
        """
      }
    }
    stage ('Create Gist') {
      steps {
        script {
          test_results_content = readFile(file: 'test_results.log')
          def response = sh(script: """curl -u JSOBot:$GITHUB_AUTH' -X POST -d '{"public":true,"files":{"test_results.log":{"content":"$test_results_content"}}}' https://api.github.com/gists """, returnStdout: true)
          gist_url = sh(script: """ python3 -c "import sys, json; obj=json.load(sys.stdin); print(obj) """, returnStdout: true)
        }
        echo $gist_url
      }
    }
    stage ('Write Comment') {
      steps {
        script {
          env.PR_NUMBER = env.BRANCH_NAME.tokenize('PR-')[0]
        }
        sh """curl -H 'Authorization: token $GITHUB_AUTH' -X POST -d '{"body": "Here are the test results: $gist_url"}'"""
      }
    }
  }
  post {
    success {
      echo "SUCCESS!"  
    }
    cleanup {
      sh 'printenv'
      sh 'git reset --hard'
      sh 'git clean -fd'
    }
  }
}
